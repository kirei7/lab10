package util;

import ui.MainFrame;

/*Клас, що потрібен лише для того, щоб викликати у об'єкта MainFrame
* метод putMessage() і передавати в нього строку
* Цей метод має виводити на екран повідомлення, яке надіслав або отримав
* користувач. ВАЖЛИВО - даний клас реалізує патерн(шаблон) проектування,
* відомий як Singleton - про нього багато написано в інтернеті, але якшо коротко,
* то суть шаблону в тому, що клас, створений за допомого нього, може мати тільки
* один екземпляр(на всю программу буде існувати лише один об'єкт типу PutMessageEvent)
* і доступ до цього екземпляру може бути здійснений з б-я точки програми.
* Для реалізації шаблону потрібні три речі*/
public class PutMessageEvent  {

    //Наступні декілька стрічок будуть лише для реалізації Singleton

    // 1) Статична private змінна, що містить екземпляр власного класу
    private static PutMessageEvent instance = new PutMessageEvent();

    // 2) private конструктор, щоб створити екземпляр класу можна було
    //лише всередині класу, тобто писати new PutMessageEvent можна тільки
    //в цьому класі, що ми й зробили на кроці 1)
    private PutMessageEvent() {
    }

    // 3) Статичний метод, за допомогою якого можна з будь-якої точки програми
    //отримати екземпляр класу
    public static PutMessageEvent getInstance() {
        return instance;
    }

    //Наступні поля необхідні нам для самої бізнес-логіки програми

    //екземпляр вікна, у яке буде посилатись повідомлення для виводу
    private MainFrame mainFrame;
    //метод для встановлення фрейму, у який посилати повідомлення
    public void setMainFrame(MainFrame mainFrame) {
        this.mainFrame = mainFrame;
    }
    //метод для посилу повідомлення у фрейм
    public void putMessage(String message) {
        mainFrame.putMessage(message);
    }
}
